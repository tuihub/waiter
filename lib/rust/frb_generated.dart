// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.5.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'dart:async';
import 'dart:convert';

import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

import 'api/app_scan.dart';
import 'api/simple.dart';
import 'api/win_icon.dart';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.5.0';

  @override
  int get rustContentHash => 112849851;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_waiter',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<List<CommonAppScannedEntry>?> crateApiAppScanScanCommonApps(
      {required CommonAppScanSetting setting});

  Future<(bool, String, int)> crateApiSimpleGetSystemProxy();

  Future<(PlatformInt64, PlatformInt64, bool)> crateApiSimpleProcessRunner(
      {required TraceMode mode,
      required String name,
      required String executePath,
      required String monitorPath,
      required String workingDir,
      required int sleepCount,
      required BigInt sleepMillis});

  Future<void> crateApiWinIconGetImagesFromExe(
      {required String executablePath, required String imagePath});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<List<CommonAppScannedEntry>?> crateApiAppScanScanCommonApps(
      {required CommonAppScanSetting setting}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_common_app_scan_setting(setting, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_opt_list_common_app_scanned_entry,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiAppScanScanCommonAppsConstMeta,
      argValues: [setting],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiAppScanScanCommonAppsConstMeta =>
      const TaskConstMeta(
        debugName: 'scan_common_apps',
        argNames: ['setting'],
      );

  @override
  Future<(bool, String, int)> crateApiSimpleGetSystemProxy() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_record_bool_string_u_16,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleGetSystemProxyConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleGetSystemProxyConstMeta =>
      const TaskConstMeta(
        debugName: 'get_system_proxy',
        argNames: [],
      );

  @override
  Future<(PlatformInt64, PlatformInt64, bool)> crateApiSimpleProcessRunner(
      {required TraceMode mode,
      required String name,
      required String executePath,
      required String monitorPath,
      required String workingDir,
      required int sleepCount,
      required BigInt sleepMillis}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_trace_mode(mode, serializer);
        sse_encode_String(name, serializer);
        sse_encode_String(executePath, serializer);
        sse_encode_String(monitorPath, serializer);
        sse_encode_String(workingDir, serializer);
        sse_encode_i_32(sleepCount, serializer);
        sse_encode_u_64(sleepMillis, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_record_i_64_i_64_bool,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiSimpleProcessRunnerConstMeta,
      argValues: [
        mode,
        name,
        executePath,
        monitorPath,
        workingDir,
        sleepCount,
        sleepMillis
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSimpleProcessRunnerConstMeta =>
      const TaskConstMeta(
        debugName: 'process_runner',
        argNames: [
          'mode',
          'name',
          'executePath',
          'monitorPath',
          'workingDir',
          'sleepCount',
          'sleepMillis'
        ],
      );

  @override
  Future<void> crateApiWinIconGetImagesFromExe(
      {required String executablePath, required String imagePath}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(executablePath, serializer);
        sse_encode_String(imagePath, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiWinIconGetImagesFromExeConstMeta,
      argValues: [executablePath, imagePath],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiWinIconGetImagesFromExeConstMeta =>
      const TaskConstMeta(
        debugName: 'get_images_from_exe',
        argNames: ['executablePath', 'imagePath'],
      );

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  CommonAppScanSetting dco_decode_box_autoadd_common_app_scan_setting(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_common_app_scan_setting(raw);
  }

  @protected
  CommonAppScanSetting dco_decode_common_app_scan_setting(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return CommonAppScanSetting(
      basePath: dco_decode_String(arr[0]),
      minInstallDirDepth: dco_decode_i_32(arr[1]),
      maxInstallDirDepth: dco_decode_i_32(arr[2]),
      minExecutableDepth: dco_decode_i_32(arr[3]),
      maxExecutableDepth: dco_decode_i_32(arr[4]),
      excludeDirectoryMatchers: dco_decode_list_String(arr[5]),
      includeExecutableMatchers: dco_decode_list_String(arr[6]),
      excludeExecutableMatchers: dco_decode_list_String(arr[7]),
    );
  }

  @protected
  CommonAppScannedEntry dco_decode_common_app_scanned_entry(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return CommonAppScannedEntry(
      path: dco_decode_String(arr[0]),
      entryType: dco_decode_common_app_scanned_entry_type(arr[1]),
      status: dco_decode_common_app_scanned_entry_status(arr[2]),
    );
  }

  @protected
  CommonAppScannedEntryStatus dco_decode_common_app_scanned_entry_status(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CommonAppScannedEntryStatus.values[raw as int];
  }

  @protected
  CommonAppScannedEntryType dco_decode_common_app_scanned_entry_type(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CommonAppScannedEntryType.values[raw as int];
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  PlatformInt64 dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64(raw as int);
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<CommonAppScannedEntry> dco_decode_list_common_app_scanned_entry(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_common_app_scanned_entry)
        .toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<CommonAppScannedEntry>? dco_decode_opt_list_common_app_scanned_entry(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_common_app_scanned_entry(raw);
  }

  @protected
  (bool, String, int) dco_decode_record_bool_string_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3) {
      throw Exception('Expected 3 elements, got ${arr.length}');
    }
    return (
      dco_decode_bool(arr[0]),
      dco_decode_String(arr[1]),
      dco_decode_u_16(arr[2]),
    );
  }

  @protected
  (PlatformInt64, PlatformInt64, bool) dco_decode_record_i_64_i_64_bool(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3) {
      throw Exception('Expected 3 elements, got ${arr.length}');
    }
    return (
      dco_decode_i_64(arr[0]),
      dco_decode_i_64(arr[1]),
      dco_decode_bool(arr[2]),
    );
  }

  @protected
  TraceMode dco_decode_trace_mode(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TraceMode.values[raw as int];
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw as int);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  CommonAppScanSetting sse_decode_box_autoadd_common_app_scan_setting(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return sse_decode_common_app_scan_setting(deserializer);
  }

  @protected
  CommonAppScanSetting sse_decode_common_app_scan_setting(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_basePath = sse_decode_String(deserializer);
    final var_minInstallDirDepth = sse_decode_i_32(deserializer);
    final var_maxInstallDirDepth = sse_decode_i_32(deserializer);
    final var_minExecutableDepth = sse_decode_i_32(deserializer);
    final var_maxExecutableDepth = sse_decode_i_32(deserializer);
    final var_excludeDirectoryMatchers = sse_decode_list_String(deserializer);
    final var_includeExecutableMatchers = sse_decode_list_String(deserializer);
    final var_excludeExecutableMatchers = sse_decode_list_String(deserializer);
    return CommonAppScanSetting(
        basePath: var_basePath,
        minInstallDirDepth: var_minInstallDirDepth,
        maxInstallDirDepth: var_maxInstallDirDepth,
        minExecutableDepth: var_minExecutableDepth,
        maxExecutableDepth: var_maxExecutableDepth,
        excludeDirectoryMatchers: var_excludeDirectoryMatchers,
        includeExecutableMatchers: var_includeExecutableMatchers,
        excludeExecutableMatchers: var_excludeExecutableMatchers);
  }

  @protected
  CommonAppScannedEntry sse_decode_common_app_scanned_entry(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_path = sse_decode_String(deserializer);
    final var_entryType =
        sse_decode_common_app_scanned_entry_type(deserializer);
    final var_status = sse_decode_common_app_scanned_entry_status(deserializer);
    return CommonAppScannedEntry(
        path: var_path, entryType: var_entryType, status: var_status);
  }

  @protected
  CommonAppScannedEntryStatus sse_decode_common_app_scanned_entry_status(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final inner = sse_decode_i_32(deserializer);
    return CommonAppScannedEntryStatus.values[inner];
  }

  @protected
  CommonAppScannedEntryType sse_decode_common_app_scanned_entry_type(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final inner = sse_decode_i_32(deserializer);
    return CommonAppScannedEntryType.values[inner];
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  PlatformInt64 sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getPlatformInt64();
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    final len_ = sse_decode_i_32(deserializer);
    final ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<CommonAppScannedEntry> sse_decode_list_common_app_scanned_entry(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    final len_ = sse_decode_i_32(deserializer);
    final ans_ = <CommonAppScannedEntry>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_common_app_scanned_entry(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<CommonAppScannedEntry>? sse_decode_opt_list_common_app_scanned_entry(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return sse_decode_list_common_app_scanned_entry(deserializer);
    } else {
      return null;
    }
  }

  @protected
  (bool, String, int) sse_decode_record_bool_string_u_16(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_field0 = sse_decode_bool(deserializer);
    final var_field1 = sse_decode_String(deserializer);
    final var_field2 = sse_decode_u_16(deserializer);
    return (var_field0, var_field1, var_field2);
  }

  @protected
  (PlatformInt64, PlatformInt64, bool) sse_decode_record_i_64_i_64_bool(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final var_field0 = sse_decode_i_64(deserializer);
    final var_field1 = sse_decode_i_64(deserializer);
    final var_field2 = sse_decode_bool(deserializer);
    return (var_field0, var_field1, var_field2);
  }

  @protected
  TraceMode sse_decode_trace_mode(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    final inner = sse_decode_i_32(deserializer);
    return TraceMode.values[inner];
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_common_app_scan_setting(
      CommonAppScanSetting self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_common_app_scan_setting(self, serializer);
  }

  @protected
  void sse_encode_common_app_scan_setting(
      CommonAppScanSetting self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.basePath, serializer);
    sse_encode_i_32(self.minInstallDirDepth, serializer);
    sse_encode_i_32(self.maxInstallDirDepth, serializer);
    sse_encode_i_32(self.minExecutableDepth, serializer);
    sse_encode_i_32(self.maxExecutableDepth, serializer);
    sse_encode_list_String(self.excludeDirectoryMatchers, serializer);
    sse_encode_list_String(self.includeExecutableMatchers, serializer);
    sse_encode_list_String(self.excludeExecutableMatchers, serializer);
  }

  @protected
  void sse_encode_common_app_scanned_entry(
      CommonAppScannedEntry self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.path, serializer);
    sse_encode_common_app_scanned_entry_type(self.entryType, serializer);
    sse_encode_common_app_scanned_entry_status(self.status, serializer);
  }

  @protected
  void sse_encode_common_app_scanned_entry_status(
      CommonAppScannedEntryStatus self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_common_app_scanned_entry_type(
      CommonAppScannedEntryType self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(PlatformInt64 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putPlatformInt64(self);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_common_app_scanned_entry(
      List<CommonAppScannedEntry> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_common_app_scanned_entry(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_opt_list_common_app_scanned_entry(
      List<CommonAppScannedEntry>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_common_app_scanned_entry(self, serializer);
    }
  }

  @protected
  void sse_encode_record_bool_string_u_16(
      (bool, String, int) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
    sse_encode_u_16(self.$3, serializer);
  }

  @protected
  void sse_encode_record_i_64_i_64_bool(
      (PlatformInt64, PlatformInt64, bool) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_64(self.$1, serializer);
    sse_encode_i_64(self.$2, serializer);
    sse_encode_bool(self.$3, serializer);
  }

  @protected
  void sse_encode_trace_mode(TraceMode self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }
}
