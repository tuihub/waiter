// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `is_root`, `walk_entry`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `eq`, `fmt`, `fmt`, `fmt`, `fmt`

Future<List<CommonAppScannedEntry>?> scanCommonApps(
        {required CommonAppScanSetting setting}) =>
    RustLib.instance.api.crateApiAppScanScanCommonApps(setting: setting);

class CommonAppScanSetting {
  final String basePath;
  final int minInstallDirDepth;
  final int maxInstallDirDepth;
  final int minExecutableDepth;
  final int maxExecutableDepth;
  final List<String> excludeDirectoryMatchers;
  final List<String> includeExecutableMatchers;
  final List<String> excludeExecutableMatchers;

  const CommonAppScanSetting({
    required this.basePath,
    required this.minInstallDirDepth,
    required this.maxInstallDirDepth,
    required this.minExecutableDepth,
    required this.maxExecutableDepth,
    required this.excludeDirectoryMatchers,
    required this.includeExecutableMatchers,
    required this.excludeExecutableMatchers,
  });

  @override
  int get hashCode =>
      basePath.hashCode ^
      minInstallDirDepth.hashCode ^
      maxInstallDirDepth.hashCode ^
      minExecutableDepth.hashCode ^
      maxExecutableDepth.hashCode ^
      excludeDirectoryMatchers.hashCode ^
      includeExecutableMatchers.hashCode ^
      excludeExecutableMatchers.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is CommonAppScanSetting &&
          runtimeType == other.runtimeType &&
          basePath == other.basePath &&
          minInstallDirDepth == other.minInstallDirDepth &&
          maxInstallDirDepth == other.maxInstallDirDepth &&
          minExecutableDepth == other.minExecutableDepth &&
          maxExecutableDepth == other.maxExecutableDepth &&
          excludeDirectoryMatchers == other.excludeDirectoryMatchers &&
          includeExecutableMatchers == other.includeExecutableMatchers &&
          excludeExecutableMatchers == other.excludeExecutableMatchers;
}

class CommonAppScannedEntry {
  final String path;
  final CommonAppScannedEntryType entryType;
  final CommonAppScannedEntryStatus status;

  const CommonAppScannedEntry({
    required this.path,
    required this.entryType,
    required this.status,
  });

  @override
  int get hashCode => path.hashCode ^ entryType.hashCode ^ status.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is CommonAppScannedEntry &&
          runtimeType == other.runtimeType &&
          path == other.path &&
          entryType == other.entryType &&
          status == other.status;
}

enum CommonAppScannedEntryStatus {
  accessed,
  skipped,
  hit,
  error,
  ;
}

enum CommonAppScannedEntryType {
  directory,
  file,
  unknown,
  ;
}
