// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use flutter_rust_bridge::{
    for_generated::{
        byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt},
        transform_result_dco, Lifetimeable, Lockable,
    },
    Handler, IntoIntoDart,
};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.10.0";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = -101712846;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__api__win_icon__get_images_from_exe_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_images_from_exe",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_executable_path = <String>::sse_decode(&mut deserializer);
            let api_image_path = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::win_icon::get_images_from_exe(
                            &api_executable_path,
                            &api_image_path,
                        )?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__system_proxy__get_system_proxy_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_system_proxy",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::system_proxy::get_system_proxy()?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__process_runner__process_runner_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "process_runner",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_mode = <crate::api::process_runner::TraceMode>::sse_decode(&mut deserializer);
            let api_name = <String>::sse_decode(&mut deserializer);
            let api_execute_path = <String>::sse_decode(&mut deserializer);
            let api_monitor_path = <String>::sse_decode(&mut deserializer);
            let api_working_dir = <String>::sse_decode(&mut deserializer);
            let api_sleep_count = <i32>::sse_decode(&mut deserializer);
            let api_sleep_duration = <chrono::Duration>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::process_runner::process_runner(
                            api_mode,
                            api_name,
                            api_execute_path,
                            api_monitor_path,
                            api_working_dir,
                            api_sleep_count,
                            api_sleep_duration,
                        )?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}
fn wire__crate__api__app_scan__scan_common_apps_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "scan_common_apps",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_setting =
                <crate::api::app_scan::CommonAppScanSetting>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || {
                        let output_ok = crate::api::app_scan::scan_common_apps(api_setting)?;
                        Ok(output_ok)
                    })(),
                )
            }
        },
    )
}

// Section: dart2rust

impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::anyhow::anyhow!("{}", inner);
    }
}

impl SseDecode for chrono::Duration {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i64>::sse_decode(deserializer);
        return chrono::Duration::microseconds(inner);
    }
}

impl SseDecode for chrono::DateTime<chrono::Utc> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i64>::sse_decode(deserializer);
        return chrono::DateTime::<chrono::Utc>::from_naive_utc_and_offset(
            chrono::DateTime::from_timestamp_micros(inner)
                .expect("invalid or out-of-range datetime")
                .naive_utc(),
            chrono::Utc,
        );
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::api::app_scan::CommonAppScanSetting {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_basePath = <String>::sse_decode(deserializer);
        let mut var_minInstallDirDepth = <i32>::sse_decode(deserializer);
        let mut var_maxInstallDirDepth = <i32>::sse_decode(deserializer);
        let mut var_minExecutableDepth = <i32>::sse_decode(deserializer);
        let mut var_maxExecutableDepth = <i32>::sse_decode(deserializer);
        let mut var_excludeDirectoryMatchers = <Vec<String>>::sse_decode(deserializer);
        let mut var_includeExecutableMatchers = <Vec<String>>::sse_decode(deserializer);
        let mut var_excludeExecutableMatchers = <Vec<String>>::sse_decode(deserializer);
        return crate::api::app_scan::CommonAppScanSetting {
            base_path: var_basePath,
            min_install_dir_depth: var_minInstallDirDepth,
            max_install_dir_depth: var_maxInstallDirDepth,
            min_executable_depth: var_minExecutableDepth,
            max_executable_depth: var_maxExecutableDepth,
            exclude_directory_matchers: var_excludeDirectoryMatchers,
            include_executable_matchers: var_includeExecutableMatchers,
            exclude_executable_matchers: var_excludeExecutableMatchers,
        };
    }
}

impl SseDecode for crate::api::app_scan::CommonAppScannedEntry {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_path = <String>::sse_decode(deserializer);
        let mut var_entryType =
            <crate::api::app_scan::CommonAppScannedEntryType>::sse_decode(deserializer);
        let mut var_status =
            <crate::api::app_scan::CommonAppScannedEntryStatus>::sse_decode(deserializer);
        return crate::api::app_scan::CommonAppScannedEntry {
            path: var_path,
            entry_type: var_entryType,
            status: var_status,
        };
    }
}

impl SseDecode for crate::api::app_scan::CommonAppScannedEntryStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::app_scan::CommonAppScannedEntryStatus::Accessed,
            1 => crate::api::app_scan::CommonAppScannedEntryStatus::Skipped,
            2 => crate::api::app_scan::CommonAppScannedEntryStatus::Hit,
            3 => crate::api::app_scan::CommonAppScannedEntryStatus::Error,
            _ => unreachable!("Invalid variant for CommonAppScannedEntryStatus: {}", inner),
        };
    }
}

impl SseDecode for crate::api::app_scan::CommonAppScannedEntryType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::app_scan::CommonAppScannedEntryType::Directory,
            1 => crate::api::app_scan::CommonAppScannedEntryType::File,
            2 => crate::api::app_scan::CommonAppScannedEntryType::Unknown,
            _ => unreachable!("Invalid variant for CommonAppScannedEntryType: {}", inner),
        };
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<String>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::app_scan::CommonAppScannedEntry> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::app_scan::CommonAppScannedEntry>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Option<Vec<crate::api::app_scan::CommonAppScannedEntry>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(
                <Vec<crate::api::app_scan::CommonAppScannedEntry>>::sse_decode(deserializer),
            );
        } else {
            return None;
        }
    }
}

impl SseDecode for (bool, String, u16) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <bool>::sse_decode(deserializer);
        let mut var_field1 = <String>::sse_decode(deserializer);
        let mut var_field2 = <u16>::sse_decode(deserializer);
        return (var_field0, var_field1, var_field2);
    }
}

impl SseDecode
    for (
        chrono::DateTime<chrono::Utc>,
        chrono::DateTime<chrono::Utc>,
        bool,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <chrono::DateTime<chrono::Utc>>::sse_decode(deserializer);
        let mut var_field1 = <chrono::DateTime<chrono::Utc>>::sse_decode(deserializer);
        let mut var_field2 = <bool>::sse_decode(deserializer);
        return (var_field0, var_field1, var_field2);
    }
}

impl SseDecode for crate::api::process_runner::TraceMode {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::process_runner::TraceMode::Simple,
            1 => crate::api::process_runner::TraceMode::ByName,
            _ => unreachable!("Invalid variant for TraceMode: {}", inner),
        };
    }
}

impl SseDecode for u16 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u16::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        1 => {
            wire__crate__api__win_icon__get_images_from_exe_impl(port, ptr, rust_vec_len, data_len)
        }
        2 => {
            wire__crate__api__system_proxy__get_system_proxy_impl(port, ptr, rust_vec_len, data_len)
        }
        3 => {
            wire__crate__api__process_runner__process_runner_impl(port, ptr, rust_vec_len, data_len)
        }
        4 => wire__crate__api__app_scan__scan_common_apps_impl(port, ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::app_scan::CommonAppScanSetting {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.base_path.into_into_dart().into_dart(),
            self.min_install_dir_depth.into_into_dart().into_dart(),
            self.max_install_dir_depth.into_into_dart().into_dart(),
            self.min_executable_depth.into_into_dart().into_dart(),
            self.max_executable_depth.into_into_dart().into_dart(),
            self.exclude_directory_matchers.into_into_dart().into_dart(),
            self.include_executable_matchers
                .into_into_dart()
                .into_dart(),
            self.exclude_executable_matchers
                .into_into_dart()
                .into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::app_scan::CommonAppScanSetting
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::app_scan::CommonAppScanSetting>
    for crate::api::app_scan::CommonAppScanSetting
{
    fn into_into_dart(self) -> crate::api::app_scan::CommonAppScanSetting {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::app_scan::CommonAppScannedEntry {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.path.into_into_dart().into_dart(),
            self.entry_type.into_into_dart().into_dart(),
            self.status.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::app_scan::CommonAppScannedEntry
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::app_scan::CommonAppScannedEntry>
    for crate::api::app_scan::CommonAppScannedEntry
{
    fn into_into_dart(self) -> crate::api::app_scan::CommonAppScannedEntry {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::app_scan::CommonAppScannedEntryStatus {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Accessed => 0.into_dart(),
            Self::Skipped => 1.into_dart(),
            Self::Hit => 2.into_dart(),
            Self::Error => 3.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::app_scan::CommonAppScannedEntryStatus
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::app_scan::CommonAppScannedEntryStatus>
    for crate::api::app_scan::CommonAppScannedEntryStatus
{
    fn into_into_dart(self) -> crate::api::app_scan::CommonAppScannedEntryStatus {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::app_scan::CommonAppScannedEntryType {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Directory => 0.into_dart(),
            Self::File => 1.into_dart(),
            Self::Unknown => 2.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::app_scan::CommonAppScannedEntryType
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::app_scan::CommonAppScannedEntryType>
    for crate::api::app_scan::CommonAppScannedEntryType
{
    fn into_into_dart(self) -> crate::api::app_scan::CommonAppScannedEntryType {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::process_runner::TraceMode {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Simple => 0.into_dart(),
            Self::ByName => 1.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::process_runner::TraceMode
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::process_runner::TraceMode>
    for crate::api::process_runner::TraceMode
{
    fn into_into_dart(self) -> crate::api::process_runner::TraceMode {
        self
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for chrono::Duration {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(
            self.num_microseconds()
                .expect("cannot get microseconds from time"),
            serializer,
        );
    }
}

impl SseEncode for chrono::DateTime<chrono::Utc> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.timestamp_micros(), serializer);
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::api::app_scan::CommonAppScanSetting {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.base_path, serializer);
        <i32>::sse_encode(self.min_install_dir_depth, serializer);
        <i32>::sse_encode(self.max_install_dir_depth, serializer);
        <i32>::sse_encode(self.min_executable_depth, serializer);
        <i32>::sse_encode(self.max_executable_depth, serializer);
        <Vec<String>>::sse_encode(self.exclude_directory_matchers, serializer);
        <Vec<String>>::sse_encode(self.include_executable_matchers, serializer);
        <Vec<String>>::sse_encode(self.exclude_executable_matchers, serializer);
    }
}

impl SseEncode for crate::api::app_scan::CommonAppScannedEntry {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.path, serializer);
        <crate::api::app_scan::CommonAppScannedEntryType>::sse_encode(self.entry_type, serializer);
        <crate::api::app_scan::CommonAppScannedEntryStatus>::sse_encode(self.status, serializer);
    }
}

impl SseEncode for crate::api::app_scan::CommonAppScannedEntryStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::app_scan::CommonAppScannedEntryStatus::Accessed => 0,
                crate::api::app_scan::CommonAppScannedEntryStatus::Skipped => 1,
                crate::api::app_scan::CommonAppScannedEntryStatus::Hit => 2,
                crate::api::app_scan::CommonAppScannedEntryStatus::Error => 3,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for crate::api::app_scan::CommonAppScannedEntryType {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::app_scan::CommonAppScannedEntryType::Directory => 0,
                crate::api::app_scan::CommonAppScannedEntryType::File => 1,
                crate::api::app_scan::CommonAppScannedEntryType::Unknown => 2,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <String>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::app_scan::CommonAppScannedEntry> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::app_scan::CommonAppScannedEntry>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Option<Vec<crate::api::app_scan::CommonAppScannedEntry>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<crate::api::app_scan::CommonAppScannedEntry>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for (bool, String, u16) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.0, serializer);
        <String>::sse_encode(self.1, serializer);
        <u16>::sse_encode(self.2, serializer);
    }
}

impl SseEncode
    for (
        chrono::DateTime<chrono::Utc>,
        chrono::DateTime<chrono::Utc>,
        bool,
    )
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <chrono::DateTime<chrono::Utc>>::sse_encode(self.0, serializer);
        <chrono::DateTime<chrono::Utc>>::sse_encode(self.1, serializer);
        <bool>::sse_encode(self.2, serializer);
    }
}

impl SseEncode for crate::api::process_runner::TraceMode {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                crate::api::process_runner::TraceMode::Simple => 0,
                crate::api::process_runner::TraceMode::ByName => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for u16 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u16::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.10.0.

    // Section: imports

    use flutter_rust_bridge::{
        for_generated::{
            byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt},
            transform_result_dco, Lifetimeable, Lockable,
        },
        Handler, IntoIntoDart,
    };

    use super::*;

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_io!();
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.10.0.

    // Section: imports

    use flutter_rust_bridge::{
        for_generated::{
            byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt},
            transform_result_dco, wasm_bindgen,
            wasm_bindgen::prelude::*,
            Lifetimeable, Lockable,
        },
        Handler, IntoIntoDart,
    };

    use super::*;

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_web!();
}
#[cfg(target_family = "wasm")]
pub use web::*;
